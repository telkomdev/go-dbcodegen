// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/wartek-id/core/tools/dbgen/sqlgen/schema (interfaces: Schema)

// Package mock_schema is a generated GoMock package.
package mock_schema

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "gitlab.com/wartek-id/core/tools/dbgen/config"
	schema "gitlab.com/wartek-id/core/tools/dbgen/sqlgen/schema"
)

// MockSchema is a mock of Schema interface.
type MockSchema struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaMockRecorder
}

// MockSchemaMockRecorder is the mock recorder for MockSchema.
type MockSchemaMockRecorder struct {
	mock *MockSchema
}

// NewMockSchema creates a new mock instance.
func NewMockSchema(ctrl *gomock.Controller) *MockSchema {
	mock := &MockSchema{ctrl: ctrl}
	mock.recorder = &MockSchemaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchema) EXPECT() *MockSchemaMockRecorder {
	return m.recorder
}

// GetFields mocks base method.
func (m *MockSchema) GetFields(arg0 string) ([]*config.Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFields", arg0)
	ret0, _ := ret[0].([]*config.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFields indicates an expected call of GetFields.
func (mr *MockSchemaMockRecorder) GetFields(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFields", reflect.TypeOf((*MockSchema)(nil).GetFields), arg0)
}

// GetIndices mocks base method.
func (m *MockSchema) GetIndices() (map[string]*schema.Indices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndices")
	ret0, _ := ret[0].(map[string]*schema.Indices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndices indicates an expected call of GetIndices.
func (mr *MockSchemaMockRecorder) GetIndices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndices", reflect.TypeOf((*MockSchema)(nil).GetIndices))
}

// GetPrimaryKeys mocks base method.
func (m *MockSchema) GetPrimaryKeys() (map[string]*schema.PrimaryKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryKeys")
	ret0, _ := ret[0].(map[string]*schema.PrimaryKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrimaryKeys indicates an expected call of GetPrimaryKeys.
func (mr *MockSchemaMockRecorder) GetPrimaryKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryKeys", reflect.TypeOf((*MockSchema)(nil).GetPrimaryKeys))
}

// GetSchemas mocks base method.
func (m *MockSchema) GetSchemas() ([]*config.Schema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemas")
	ret0, _ := ret[0].([]*config.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemas indicates an expected call of GetSchemas.
func (mr *MockSchemaMockRecorder) GetSchemas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemas", reflect.TypeOf((*MockSchema)(nil).GetSchemas))
}

// GetTables mocks base method.
func (m *MockSchema) GetTables() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTables")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTables indicates an expected call of GetTables.
func (mr *MockSchemaMockRecorder) GetTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockSchema)(nil).GetTables))
}
